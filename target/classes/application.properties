spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
server.port=8080

management.endpoints.web.exposure.include=*

#how we will connect to the config server to get the application properties
spring.application.name=accounts
spring.profiles.active=prod
spring.config.import=optional:configserver:http://localhost:8071/

#eureka connection configuration
eureka.instance.preferIpAddress = true 
eureka.client.registerWithEureka = true
eureka.client.fetchRegistry = true
eureka.client.serviceUrl.defaultZone = http://localhost:8060/eureka/

## Configuring info endpoint
info.app.name=Accounts Microservice
info.app.description=ChedjouSimplice Bank Accounts Application
info.app.version=1.0.0

# actuator has a gracefull shutdown endpoint what will unregister app to eureka server
endpoints.shutdown.enabled=true
management.endpoint.shutdown.enabled=true

#Circuit breaker Configuration
#registre my circuit breaker with actuator
resilience4j.circuitbreaker.configs.default.registerHealthIndicator= true 

#moniter minimum of 5 requests made to that api to keep my circuit open or close , by default it 50
resilience4j.circuitbreaker.instances.customerDetailsCircuitBreaker.minimumNumberOfCalls= 5

# at least 50% of failing (it will be 3 failed request) will open the circuit
resilience4j.circuitbreaker.instances.customerDetailsCircuitBreaker.failureRateThreshold= 50

#how time CB wait in order to half_open to check if CB is working or not  = 30S
resilience4j.circuitbreaker.instances.customerDetailsCircuitBreaker.waitDurationInOpenState= 30000

#when is half open only allow 2 requests -> if both successfull go back to closed, if only one or 0 go back to open
resilience4j.circuitbreaker.instances.customerDetailsCircuitBreaker.permittedNumberOfCallsInHalfOpenState=2


#by default only 10% of log will be sent to zipkin, but here we are setting it to 1 mean 100%
spring.sleuth.sampler.percentage=1

#url of our zipkin
spring.zipkin.baseUrl=http://localhost:9411/


#resilience4j.retry.configs.default.registerHealthIndicator= true
#resilience4j.retry.instances.retryForCustomerDetails.maxRetryAttempts=3
#resilience4j.retry.instances.retryForCustomerDetails.waitDuration=2000
#
#resilience4j.ratelimiter.configs.default.registerHealthIndicator= true
#resilience4j.ratelimiter.instances.sayHello.timeoutDuration=5000
#resilience4j.ratelimiter.instances.sayHello.limitRefreshPeriod=5000
#resilience4j.ratelimiter.instances.sayHello.limitForPeriod=1